#+TITLE: Multiplayer

#+BEGIN_SRC dot :file multi1.png
 digraph finite_state_machine {

 loginScreen -> selectScreen;
 selectScreen -> shipSelectScreen

 shipSelectScreen -> stationMap
 stationMap -> shopScreen
 shopScreen -> stationMap

 stationMap -> travelScreen
travelScreen -> stopScreen
stopScreen -> stationMap

stopScreen ->  stationMap
stopScreen-> combatScreen
combatScreen -> stationMap

 }
#+END_SRC

#+RESULTS:
[[file:multi1.png]]


#+BEGIN_SRC dot :file multiFight.png
 digraph finite_state_machine {

canShot -> shot
canShot -> canShot
 }
 #+END_SRC

 #+RESULTS:
 [[file:multiFight.png]]




#+BEGIN_SRC dot :file Multiplayer.png
 digraph finite_state_machine {


lobbyEnter -> lobbyWaiting  [label="enter the Lobby"]
lobbyWaiting -> lobbyWaiting
lobbyWaiting -> lobbyFull [label="other player joins"]

lobbyWaiting -> singlePlayer [label="no player found"]



 lobbyFull -> readyAllPressed ->  startGame
 }
 #+END_SRC

 #+RESULTS:
 [[file:Multiplayer.png]]



#+BEGIN_SRC dot :file jumping.png
digraph jumping {

        selectShipScreen -> stationMap [label="begin game"]
        stationMap -> { stopScreen, shopScreen }
        shopScreen -> stationMap

        stopScreen -> fightScreen

        fightScreen -> looseScreen
        looseScreen -> stationMap        [label="looses half of Ressources"]

        stopScreen -> stationMap


       fightScreen -> winScreen -> stationMap



       stationMap -> jumpWaiting -> jumpWaiting -> jumpingAllReady -> travelScreen
       travelScreen -> stationMap [label="Get all Acotrs from Stop"]
}

#+END_SRC

#+RESULTS:
[[file:jumping.png]]



#+BEGIN_SRC dot :file kampf.png

digraph automaton {

    subgraph cluster_0 {
        label="Client";

        fightStart -> combatScreen;
        combatScreen -> {chooseWeapon, selectTarget moveCrewMember};
        chooseWeapon -> combatScreen [label="choose weapon with W"];
        selectTarget -> findWeaponByNameAndShip [label="chooses the target"];
        findWeaponByNameAndShip -> combatScreen;
        combatScreen -> fireWeapon [label="SPACE"];
        fireWeapon -> logicOfFirePlayer [label="Target with selected Weapons"];
        logicOfFirePlayer -> shotValidation [label="List<Weapon> weapons"];


        handleShot -> {drawBullet, removeShield}



        }

    subgraph cluster_1 {
        label="Shot Validation";

        shotValidation -> canShot [label="can the Weapons shot?"]

        canShot -> checkHP [label="is hp over 0"]
        checkHP -> noShot
        checkHP -> outSideRange [label="(currentTime - lastShot) > coolDow"]
        outSideRange -> noShot [label="false"]
        noShot -> shotValidation
        outSideRange -> isUsable  [label="true"]
        isUsable -> fireShot [label="true"]
        fireShot -> shotValidation  [label="List<Boolean> bullets"]

        }


    subgraph cluster_2 {
        label="Fire Weapon"

        shotValidation -> makeAShot [label="List<Weaons> weaponsToFire"]

        makeAShot -> hasHit [label="% hitRate + % random"]

        hasHit -> miss [label="hasHit < 1"]
        miss -> shotAnswer


        hasHit -> hitShield[label="Shield < 0"]
        hitShield -> reduceShield [label="shield - dammage"]
        reduceShield -> shotAnswer

        hasHit -> removeHealth [label="hp - dammage"]
        removeHealth -> setUsableFalse
        setUsableFalse -> removeOxygen [label="oxygen - removeOxygen"]
        removeOxygen -> shotAnswer



        shotAnswer -> handleShot


    }

}
#+END_SRC

#+RESULTS:
[[file:kampf.png]]





#+BEGIN_SRC dot :file fightMechanik.png


digraph automaton {

    start -> checkHP [label="hp > 0"]
    checkHP ->  loosesFight [label="false"]

    #start -> getCrewMember[label="site == 0"]
    #getCrewMember -> loosesFight [label="true"]


}



#+END_SRC

#+RESULTS:
[[file:fightMechanik.png]]



#+BEGIN_SRC dot :file kampfRunde.png

digraph automaton {

rankdir=LR
startFight -> waitForTurn -> makeTurn -> {energieVerteilen, attackWithWeapon, moveCrew} -> makeTurn -> endTurn

endTurn -> waitForTurn


}

#+END_SRC

#+RESULTS:
[[file:kampfRunde.png]]
